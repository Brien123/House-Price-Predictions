{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"},{"sourceId":17777,"databundleVersionId":869809,"sourceType":"competition"}],"dockerImageVersionId":30558,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-11-13T16:53:30.808839Z","iopub.execute_input":"2023-11-13T16:53:30.809616Z","iopub.status.idle":"2023-11-13T16:53:31.338060Z","shell.execute_reply.started":"2023-11-13T16:53:30.809569Z","shell.execute_reply":"2023-11-13T16:53:31.336829Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/house-prices-advanced-regression-techniques/sample_submission.csv\n/kaggle/input/house-prices-advanced-regression-techniques/data_description.txt\n/kaggle/input/house-prices-advanced-regression-techniques/train.csv\n/kaggle/input/house-prices-advanced-regression-techniques/test.csv\n/kaggle/input/nlp-getting-started/sample_submission.csv\n/kaggle/input/nlp-getting-started/train.csv\n/kaggle/input/nlp-getting-started/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:31.340342Z","iopub.execute_input":"2023-11-13T16:53:31.340850Z","iopub.status.idle":"2023-11-13T16:53:32.945705Z","shell.execute_reply.started":"2023-11-13T16:53:31.340809Z","shell.execute_reply":"2023-11-13T16:53:32.944313Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":"# Load dataset","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/train.csv\")\ndf.head(10)","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:32.947220Z","iopub.execute_input":"2023-11-13T16:53:32.947627Z","iopub.status.idle":"2023-11-13T16:53:33.037483Z","shell.execute_reply.started":"2023-11-13T16:53:32.947593Z","shell.execute_reply":"2023-11-13T16:53:33.036199Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n5   6          50       RL         85.0    14115   Pave   NaN      IR1   \n6   7          20       RL         75.0    10084   Pave   NaN      Reg   \n7   8          60       RL          NaN    10382   Pave   NaN      IR1   \n8   9          50       RM         51.0     6120   Pave   NaN      Reg   \n9  10         190       RL         50.0     7420   Pave   NaN      Reg   \n\n  LandContour Utilities  ... PoolArea PoolQC  Fence MiscFeature MiscVal  \\\n0         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n1         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n2         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n3         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n4         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n5         Lvl    AllPub  ...        0    NaN  MnPrv        Shed     700   \n6         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n7         Lvl    AllPub  ...        0    NaN    NaN        Shed     350   \n8         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n9         Lvl    AllPub  ...        0    NaN    NaN         NaN       0   \n\n  MoSold YrSold  SaleType  SaleCondition  SalePrice  \n0      2   2008        WD         Normal     208500  \n1      5   2007        WD         Normal     181500  \n2      9   2008        WD         Normal     223500  \n3      2   2006        WD        Abnorml     140000  \n4     12   2008        WD         Normal     250000  \n5     10   2009        WD         Normal     143000  \n6      8   2007        WD         Normal     307000  \n7     11   2009        WD         Normal     200000  \n8      4   2008        WD        Abnorml     129900  \n9      1   2008        WD         Normal     118000  \n\n[10 rows x 81 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>6</td>\n      <td>50</td>\n      <td>RL</td>\n      <td>85.0</td>\n      <td>14115</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>Shed</td>\n      <td>700</td>\n      <td>10</td>\n      <td>2009</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>143000</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>7</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>75.0</td>\n      <td>10084</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>8</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>307000</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>8</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>NaN</td>\n      <td>10382</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Shed</td>\n      <td>350</td>\n      <td>11</td>\n      <td>2009</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>200000</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>9</td>\n      <td>50</td>\n      <td>RM</td>\n      <td>51.0</td>\n      <td>6120</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>129900</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>10</td>\n      <td>190</td>\n      <td>RL</td>\n      <td>50.0</td>\n      <td>7420</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>118000</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 81 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.shape","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.040418Z","iopub.execute_input":"2023-11-13T16:53:33.040755Z","iopub.status.idle":"2023-11-13T16:53:33.047743Z","shell.execute_reply.started":"2023-11-13T16:53:33.040725Z","shell.execute_reply":"2023-11-13T16:53:33.046667Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"(1460, 81)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Dataset description ","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.049689Z","iopub.execute_input":"2023-11-13T16:53:33.050139Z","iopub.status.idle":"2023-11-13T16:53:33.091702Z","shell.execute_reply.started":"2023-11-13T16:53:33.050098Z","shell.execute_reply":"2023-11-13T16:53:33.090518Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Project tasks","metadata":{}},{"cell_type":"markdown","source":"Ask a home buyer to describe their dream house, and they probably won't begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition's dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.\nWith 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.","metadata":{}},{"cell_type":"markdown","source":"# Data cleaning ","metadata":{}},{"cell_type":"markdown","source":"Displaying all columbs with null values and the number of null values","metadata":{}},{"cell_type":"code","source":"# checking for null values\nnulls = df.isnull().sum()\nnulls = nulls[nulls>0]\nnulls","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.093305Z","iopub.execute_input":"2023-11-13T16:53:33.093650Z","iopub.status.idle":"2023-11-13T16:53:33.111498Z","shell.execute_reply.started":"2023-11-13T16:53:33.093619Z","shell.execute_reply":"2023-11-13T16:53:33.110303Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"LotFrontage      259\nAlley           1369\nMasVnrType       872\nMasVnrArea         8\nBsmtQual          37\nBsmtCond          37\nBsmtExposure      38\nBsmtFinType1      37\nBsmtFinType2      38\nElectrical         1\nFireplaceQu      690\nGarageType        81\nGarageYrBlt       81\nGarageFinish      81\nGarageQual        81\nGarageCond        81\nPoolQC          1453\nFence           1179\nMiscFeature     1406\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"We can see that there's alot of missing, null and wrongly formatted data. Let's fix that. Below is the full description of the various columns that contains alot of nulls.","metadata":{}},{"cell_type":"markdown","source":"1. LotFrontage: Linear feet of street connected to property\n\n2. Alley: Type of alley access to property\n- Grvl Gravel\n- Pave Paved\n- NA   No alley access\n\n3. BsmtQual: Assesses the height of the basement ceiling\n- Ex   Excellent (100+ inches) \n- Gd   Good (90-99 inches)\n- TA   Typical (80-89 inches)\n- Fa   Fair (70-79 inches)\n- Po   Poor (<70 inches)\n- NA   No Basement\n\n4. BsmtCond: Evaluates the living conditions of the basement \n- Ex   Excellent\n- Gd   Good\n- TA   Typical - slight dampness allowed\n- Fa   Fair - dampness or some cracking or settling\n- Po   Poor - Severe cracking, settling, or wetness\n- NA   No Basement\n\n5. BsmtExposure: Refers to walkout or garden level walls\n- Gd   Good Exposure\n- Av   Average Exposure (split levels or foyers typically score average or above)  \n- Mn   Mimimum Exposure\n- No   No Exposure\n- NA   No Basement\n\n6. BsmtFinType1: Rating of basement finished area\n- GLQ  Good Living Quarters\n- ALQ  Average Living Quarters\n- BLQ  Below Average Living Quarters   \n- Rec  Average Rec Room\n- LwQ  Low Quality\n- Unf  Unfinshed\n- NA   No Basement\n\n7. BsmtFinType2: Rating of basement finished area (if multiple types)","metadata":{}},{"cell_type":"markdown","source":"Replacing Null values in LotFrontage columns with the mean LotFrontage of the respective neighborhoods","metadata":{}},{"cell_type":"code","source":"neighborhood_avg = df.groupby('Neighborhood')['LotFrontage'].median()\n\n# Filling in the null values in LotFrontage column with the average LotFrontage of the respective neighborhoods\ndf['LotFrontage'] = df.apply(lambda row: neighborhood_avg[row['Neighborhood']] if pd.isnull(row['LotFrontage']) else row['LotFrontage'], axis=1)\n\n# Checking for null values in LotFrontage column\ndf['LotFrontage'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.113569Z","iopub.execute_input":"2023-11-13T16:53:33.113997Z","iopub.status.idle":"2023-11-13T16:53:33.159163Z","shell.execute_reply.started":"2023-11-13T16:53:33.113958Z","shell.execute_reply":"2023-11-13T16:53:33.158093Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"Replacing null values in Electrical columb with ghe most frequent value in electrical column ","metadata":{}},{"cell_type":"code","source":"# Find the most frequent value in the Electrical column\nmost_frequent_value = df['Electrical'].mode()[0]\n\n# Filling in the null values in Electrical column with the most frequent value\ndf['Electrical'].fillna(most_frequent_value, inplace=True)\n\n# Print the updated dataset\ndf['Electrical'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.161376Z","iopub.execute_input":"2023-11-13T16:53:33.161825Z","iopub.status.idle":"2023-11-13T16:53:33.173291Z","shell.execute_reply.started":"2023-11-13T16:53:33.161783Z","shell.execute_reply":"2023-11-13T16:53:33.172166Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"Replacing null values in categorical columns with 'N' and numerical columns with '0'","metadata":{}},{"cell_type":"code","source":"# Defining the categorical columns and their default imputation values\ncategorical_columns = [\n    'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType', 'GarageFinish',\n    'GarageQual', 'GarageCond', 'BsmtExposure', 'BsmtFinType2', 'BsmtFinType1', 'BsmtCond',\n    'BsmtQual', 'MasVnrType'\n]\ncategorical_impute_value = 'N'\n\n# Impute categorical columns\ndf[categorical_columns] = df[categorical_columns].fillna(categorical_impute_value)\n\n# Defining the numerical columns and their default imputation values\nnumerical_columns = ['GarageYrBlt', 'MasVnrArea']\nnumerical_impute_value = 0\n\n# Impute numerical columns\ndf[numerical_columns] = df[numerical_columns].fillna(numerical_impute_value)\n\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.175173Z","iopub.execute_input":"2023-11-13T16:53:33.175700Z","iopub.status.idle":"2023-11-13T16:53:33.209426Z","shell.execute_reply.started":"2023-11-13T16:53:33.175660Z","shell.execute_reply":"2023-11-13T16:53:33.208291Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"Id               0\nMSSubClass       0\nMSZoning         0\nLotFrontage      0\nLotArea          0\n                ..\nMoSold           0\nYrSold           0\nSaleType         0\nSaleCondition    0\nSalePrice        0\nLength: 81, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"dataset information ","metadata":{}},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.213750Z","iopub.execute_input":"2023-11-13T16:53:33.214102Z","iopub.status.idle":"2023-11-13T16:53:33.325872Z","shell.execute_reply.started":"2023-11-13T16:53:33.214070Z","shell.execute_reply":"2023-11-13T16:53:33.324729Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\ncount  1460.000000  1460.000000  1460.000000    1460.000000  1460.000000   \nmean    730.500000    56.897260    70.199658   10516.828082     6.099315   \nstd     421.610009    42.300571    22.431902    9981.264932     1.382997   \nmin       1.000000    20.000000    21.000000    1300.000000     1.000000   \n25%     365.750000    20.000000    60.000000    7553.500000     5.000000   \n50%     730.500000    50.000000    70.000000    9478.500000     6.000000   \n75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \nmax    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n\n       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\ncount  1460.000000  1460.000000   1460.000000  1460.000000  1460.000000  ...   \nmean      5.575342  1971.267808   1984.865753   103.117123   443.639726  ...   \nstd       1.112799    30.202904     20.645407   180.731373   456.098091  ...   \nmin       1.000000  1872.000000   1950.000000     0.000000     0.000000  ...   \n25%       5.000000  1954.000000   1967.000000     0.000000     0.000000  ...   \n50%       5.000000  1973.000000   1994.000000     0.000000   383.500000  ...   \n75%       6.000000  2000.000000   2004.000000   164.250000   712.250000  ...   \nmax       9.000000  2010.000000   2010.000000  1600.000000  5644.000000  ...   \n\n        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\ncount  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \nmean     94.244521    46.660274      21.954110     3.409589    15.060959   \nstd     125.338794    66.256028      61.119149    29.317331    55.757415   \nmin       0.000000     0.000000       0.000000     0.000000     0.000000   \n25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n75%     168.000000    68.000000       0.000000     0.000000     0.000000   \nmax     857.000000   547.000000     552.000000   508.000000   480.000000   \n\n          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \ncount  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \nmean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \nstd      40.177307    496.123024     2.703626     1.328095   79442.502883  \nmin       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \nmax     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n\n[8 rows x 38 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>OverallQual</th>\n      <th>OverallCond</th>\n      <th>YearBuilt</th>\n      <th>YearRemodAdd</th>\n      <th>MasVnrArea</th>\n      <th>BsmtFinSF1</th>\n      <th>...</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>EnclosedPorch</th>\n      <th>3SsnPorch</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>...</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>730.500000</td>\n      <td>56.897260</td>\n      <td>70.199658</td>\n      <td>10516.828082</td>\n      <td>6.099315</td>\n      <td>5.575342</td>\n      <td>1971.267808</td>\n      <td>1984.865753</td>\n      <td>103.117123</td>\n      <td>443.639726</td>\n      <td>...</td>\n      <td>94.244521</td>\n      <td>46.660274</td>\n      <td>21.954110</td>\n      <td>3.409589</td>\n      <td>15.060959</td>\n      <td>2.758904</td>\n      <td>43.489041</td>\n      <td>6.321918</td>\n      <td>2007.815753</td>\n      <td>180921.195890</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>421.610009</td>\n      <td>42.300571</td>\n      <td>22.431902</td>\n      <td>9981.264932</td>\n      <td>1.382997</td>\n      <td>1.112799</td>\n      <td>30.202904</td>\n      <td>20.645407</td>\n      <td>180.731373</td>\n      <td>456.098091</td>\n      <td>...</td>\n      <td>125.338794</td>\n      <td>66.256028</td>\n      <td>61.119149</td>\n      <td>29.317331</td>\n      <td>55.757415</td>\n      <td>40.177307</td>\n      <td>496.123024</td>\n      <td>2.703626</td>\n      <td>1.328095</td>\n      <td>79442.502883</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>20.000000</td>\n      <td>21.000000</td>\n      <td>1300.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1872.000000</td>\n      <td>1950.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>2006.000000</td>\n      <td>34900.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>365.750000</td>\n      <td>20.000000</td>\n      <td>60.000000</td>\n      <td>7553.500000</td>\n      <td>5.000000</td>\n      <td>5.000000</td>\n      <td>1954.000000</td>\n      <td>1967.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>2007.000000</td>\n      <td>129975.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>730.500000</td>\n      <td>50.000000</td>\n      <td>70.000000</td>\n      <td>9478.500000</td>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>1973.000000</td>\n      <td>1994.000000</td>\n      <td>0.000000</td>\n      <td>383.500000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>25.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>6.000000</td>\n      <td>2008.000000</td>\n      <td>163000.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1095.250000</td>\n      <td>70.000000</td>\n      <td>80.000000</td>\n      <td>11601.500000</td>\n      <td>7.000000</td>\n      <td>6.000000</td>\n      <td>2000.000000</td>\n      <td>2004.000000</td>\n      <td>164.250000</td>\n      <td>712.250000</td>\n      <td>...</td>\n      <td>168.000000</td>\n      <td>68.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>8.000000</td>\n      <td>2009.000000</td>\n      <td>214000.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1460.000000</td>\n      <td>190.000000</td>\n      <td>313.000000</td>\n      <td>215245.000000</td>\n      <td>10.000000</td>\n      <td>9.000000</td>\n      <td>2010.000000</td>\n      <td>2010.000000</td>\n      <td>1600.000000</td>\n      <td>5644.000000</td>\n      <td>...</td>\n      <td>857.000000</td>\n      <td>547.000000</td>\n      <td>552.000000</td>\n      <td>508.000000</td>\n      <td>480.000000</td>\n      <td>738.000000</td>\n      <td>15500.000000</td>\n      <td>12.000000</td>\n      <td>2010.000000</td>\n      <td>755000.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 38 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Sales price distribution \n\nLet's look at the sales price distribution ","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(20,10))\nsns.distplot(df['SalePrice'], bins=200)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:33.327669Z","iopub.execute_input":"2023-11-13T16:53:33.328143Z","iopub.status.idle":"2023-11-13T16:53:34.115910Z","shell.execute_reply.started":"2023-11-13T16:53:33.328106Z","shell.execute_reply":"2023-11-13T16:53:34.114659Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_32/2026420993.py:2: UserWarning: \n\n`distplot` is a deprecated function and will be removed in seaborn v0.14.0.\n\nPlease adapt your code to use either `displot` (a figure-level function with\nsimilar flexibility) or `histplot` (an axes-level function for histograms).\n\nFor a guide to updating your code to use the new functions, please see\nhttps://gist.github.com/mwaskom/de44147ed2974457ad6372750bbe5751\n\n  sns.distplot(df['SalePrice'], bins=200)\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Outlier detection\nNot all of the values in the dataset are to be used. Some values of sale price are very high and dont occur regularly. Those are outliers. We will look for them and remove them.","metadata":{}},{"cell_type":"code","source":"#box plot\nsns.boxplot(df['SalePrice'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:34.117729Z","iopub.execute_input":"2023-11-13T16:53:34.118209Z","iopub.status.idle":"2023-11-13T16:53:34.340657Z","shell.execute_reply.started":"2023-11-13T16:53:34.118166Z","shell.execute_reply":"2023-11-13T16:53:34.339386Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"# Removing outliers\ndf=df[df['SalePrice']<=350000]\nsns.boxplot(df['SalePrice'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:34.342137Z","iopub.execute_input":"2023-11-13T16:53:34.342509Z","iopub.status.idle":"2023-11-13T16:53:34.556674Z","shell.execute_reply.started":"2023-11-13T16:53:34.342478Z","shell.execute_reply":"2023-11-13T16:53:34.555438Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Numerical columns distribution \n\nLet's get the numerical columns and take a look at their distribution","metadata":{}},{"cell_type":"code","source":"# Extract the numerical columns excluding the object datatype\n\nnumerical_columns = df.select_dtypes(exclude=['object'])\n\nnumerical_columns.columns","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:34.557948Z","iopub.execute_input":"2023-11-13T16:53:34.558277Z","iopub.status.idle":"2023-11-13T16:53:34.567601Z","shell.execute_reply.started":"2023-11-13T16:53:34.558235Z","shell.execute_reply":"2023-11-13T16:53:34.566505Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Index(['Id', 'MSSubClass', 'LotFrontage', 'LotArea', 'OverallQual',\n       'OverallCond', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'BsmtFinSF1',\n       'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd',\n       'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea', 'WoodDeckSF',\n       'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n       'MiscVal', 'MoSold', 'YrSold', 'SalePrice'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"numerical_columns.hist(figsize=(20,10))\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:34.569289Z","iopub.execute_input":"2023-11-13T16:53:34.569580Z","iopub.status.idle":"2023-11-13T16:53:40.875922Z","shell.execute_reply.started":"2023-11-13T16:53:34.569553Z","shell.execute_reply":"2023-11-13T16:53:40.874661Z"},"trusted":true},"execution_count":15,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1000 with 42 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"# Feature Engineering \n\n## Encoding categorical columns\nLet's encode the categorical columns. Machine learning algorithms can't understand text, we need to convert it to numerical data.","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# LabelEncoder object\nencoder = LabelEncoder()\n\n# Iterating through the DataFrame columns\nfor column in df.columns:\n    \n    # Check if the column is categorical\n    if df[column].dtype == 'object':\n        \n        # Encode the categorical column using LabelEncoder\n        df[column] = encoder.fit_transform(df[column])\n        \ndf.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:40.877874Z","iopub.execute_input":"2023-11-13T16:53:40.878353Z","iopub.status.idle":"2023-11-13T16:53:41.114958Z","shell.execute_reply.started":"2023-11-13T16:53:40.878309Z","shell.execute_reply":"2023-11-13T16:53:41.113655Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"   Id  MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  LotShape  \\\n0   1          60         3         65.0     8450       1      1         3   \n1   2          20         3         80.0     9600       1      1         3   \n2   3          60         3         68.0    11250       1      1         0   \n3   4          70         3         60.0     9550       1      1         0   \n4   5          60         3         84.0    14260       1      1         0   \n\n   LandContour  Utilities  ...  PoolArea  PoolQC  Fence  MiscFeature  MiscVal  \\\n0            3          0  ...         0       3      4            1        0   \n1            3          0  ...         0       3      4            1        0   \n2            3          0  ...         0       3      4            1        0   \n3            3          0  ...         0       3      4            1        0   \n4            3          0  ...         0       3      4            1        0   \n\n   MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n0       2    2008         8              4     208500  \n1       5    2007         8              4     181500  \n2       9    2008         8              4     223500  \n3       2    2006         8              0     140000  \n4      12    2008         8              4     250000  \n\n[5 rows x 81 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>3</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>3</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>3</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>70</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>0</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>60</td>\n      <td>3</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 81 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Let's drop the id column. It is of no use to us","metadata":{}},{"cell_type":"code","source":"df.drop(columns='Id', axis=1, inplace=True)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:41.116834Z","iopub.execute_input":"2023-11-13T16:53:41.117310Z","iopub.status.idle":"2023-11-13T16:53:41.156269Z","shell.execute_reply.started":"2023-11-13T16:53:41.117267Z","shell.execute_reply":"2023-11-13T16:53:41.155122Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   MSSubClass  MSZoning  LotFrontage  LotArea  Street  Alley  LotShape  \\\n0          60         3         65.0     8450       1      1         3   \n1          20         3         80.0     9600       1      1         3   \n2          60         3         68.0    11250       1      1         0   \n3          70         3         60.0     9550       1      1         0   \n4          60         3         84.0    14260       1      1         0   \n\n   LandContour  Utilities  LotConfig  ...  PoolArea  PoolQC  Fence  \\\n0            3          0          4  ...         0       3      4   \n1            3          0          2  ...         0       3      4   \n2            3          0          4  ...         0       3      4   \n3            3          0          0  ...         0       3      4   \n4            3          0          2  ...         0       3      4   \n\n   MiscFeature  MiscVal  MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n0            1        0       2    2008         8              4     208500  \n1            1        0       5    2007         8              4     181500  \n2            1        0       9    2008         8              4     223500  \n3            1        0       2    2006         8              0     140000  \n4            1        0      12    2008         8              4     250000  \n\n[5 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>3</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>3</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>3</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>70</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>0</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>3</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>1</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 80 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Let's select the feature(X) and target(Y) variables ","metadata":{}},{"cell_type":"code","source":"y = df['SalePrice']\ny.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:41.158178Z","iopub.execute_input":"2023-11-13T16:53:41.158590Z","iopub.status.idle":"2023-11-13T16:53:41.166897Z","shell.execute_reply.started":"2023-11-13T16:53:41.158555Z","shell.execute_reply":"2023-11-13T16:53:41.165714Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"0    208500\n1    181500\n2    223500\n3    140000\n4    250000\nName: SalePrice, dtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"Lets see which columns correlate very well the SalePrice column. That eay we can know which columns to use as features ","metadata":{}},{"cell_type":"code","source":"# We will set a minimum correlation threshold of 0.2\ndf_cor=df.corr()\nFeatures=df_cor['SalePrice'][df_cor['SalePrice']>=0.2]\nFeatures=df[df_cor][Features.index]\nFeatures.columns","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:41.168516Z","iopub.execute_input":"2023-11-13T16:53:41.169119Z","iopub.status.idle":"2023-11-13T16:53:41.268841Z","shell.execute_reply.started":"2023-11-13T16:53:41.169088Z","shell.execute_reply":"2023-11-13T16:53:41.267574Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"Index(['LotFrontage', 'LotArea', 'HouseStyle', 'OverallQual', 'YearBuilt',\n       'YearRemodAdd', 'MasVnrArea', 'Foundation', 'BsmtFinSF1', 'BsmtUnfSF',\n       'TotalBsmtSF', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'GrLivArea', 'BsmtFullBath', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n       'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea',\n       'GarageQual', 'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'SaleCondition', 'SalePrice'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"X=df[Features.columns].drop(columns='SalePrice', axis= True)\nX.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:41.270539Z","iopub.execute_input":"2023-11-13T16:53:41.270957Z","iopub.status.idle":"2023-11-13T16:53:41.299311Z","shell.execute_reply.started":"2023-11-13T16:53:41.270918Z","shell.execute_reply":"2023-11-13T16:53:41.298350Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"   LotFrontage  LotArea  HouseStyle  OverallQual  YearBuilt  YearRemodAdd  \\\n0         65.0     8450           5            7       2003          2003   \n1         80.0     9600           2            6       1976          1976   \n2         68.0    11250           5            7       2001          2002   \n3         60.0     9550           5            7       1915          1970   \n4         84.0    14260           5            8       2000          2000   \n\n   MasVnrArea  Foundation  BsmtFinSF1  BsmtUnfSF  ...  Fireplaces  \\\n0       196.0           2         706        150  ...           0   \n1         0.0           1         978        284  ...           1   \n2       162.0           2         486        434  ...           1   \n3         0.0           0         216        540  ...           1   \n4       350.0           2         655        490  ...           1   \n\n   GarageYrBlt  GarageCars  GarageArea  GarageQual  GarageCond  PavedDrive  \\\n0       2003.0           2         548           5           5           2   \n1       1976.0           2         460           5           5           2   \n2       2001.0           2         608           5           5           2   \n3       1998.0           3         642           5           5           2   \n4       2000.0           3         836           5           5           2   \n\n   WoodDeckSF  OpenPorchSF  SaleCondition  \n0           0           61              4  \n1         298            0              4  \n2           0           42              4  \n3           0           35              0  \n4         192           84              4  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>HouseStyle</th>\n      <th>OverallQual</th>\n      <th>YearBuilt</th>\n      <th>YearRemodAdd</th>\n      <th>MasVnrArea</th>\n      <th>Foundation</th>\n      <th>BsmtFinSF1</th>\n      <th>BsmtUnfSF</th>\n      <th>...</th>\n      <th>Fireplaces</th>\n      <th>GarageYrBlt</th>\n      <th>GarageCars</th>\n      <th>GarageArea</th>\n      <th>GarageQual</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>5</td>\n      <td>7</td>\n      <td>2003</td>\n      <td>2003</td>\n      <td>196.0</td>\n      <td>2</td>\n      <td>706</td>\n      <td>150</td>\n      <td>...</td>\n      <td>0</td>\n      <td>2003.0</td>\n      <td>2</td>\n      <td>548</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>0</td>\n      <td>61</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>2</td>\n      <td>6</td>\n      <td>1976</td>\n      <td>1976</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>978</td>\n      <td>284</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1976.0</td>\n      <td>2</td>\n      <td>460</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>298</td>\n      <td>0</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>5</td>\n      <td>7</td>\n      <td>2001</td>\n      <td>2002</td>\n      <td>162.0</td>\n      <td>2</td>\n      <td>486</td>\n      <td>434</td>\n      <td>...</td>\n      <td>1</td>\n      <td>2001.0</td>\n      <td>2</td>\n      <td>608</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>0</td>\n      <td>42</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>5</td>\n      <td>7</td>\n      <td>1915</td>\n      <td>1970</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>216</td>\n      <td>540</td>\n      <td>...</td>\n      <td>1</td>\n      <td>1998.0</td>\n      <td>3</td>\n      <td>642</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>0</td>\n      <td>35</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>5</td>\n      <td>8</td>\n      <td>2000</td>\n      <td>2000</td>\n      <td>350.0</td>\n      <td>2</td>\n      <td>655</td>\n      <td>490</td>\n      <td>...</td>\n      <td>1</td>\n      <td>2000.0</td>\n      <td>3</td>\n      <td>836</td>\n      <td>5</td>\n      <td>5</td>\n      <td>2</td>\n      <td>192</td>\n      <td>84</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Scaling\nLet's use the Min Max scaler technique to scale the dataset","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaled_X = scaler.fit_transform(X)\nscaled_X = pd.DataFrame(scaled_X, columns = X.columns)\nscaled_X.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:41.301191Z","iopub.execute_input":"2023-11-13T16:53:41.301573Z","iopub.status.idle":"2023-11-13T16:53:41.340667Z","shell.execute_reply.started":"2023-11-13T16:53:41.301542Z","shell.execute_reply":"2023-11-13T16:53:41.339229Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   LotFrontage   LotArea  HouseStyle  OverallQual  YearBuilt  YearRemodAdd  \\\n0     0.150685  0.043768    0.714286     0.666667   0.956204      0.883333   \n1     0.202055  0.050808    0.285714     0.555556   0.759124      0.433333   \n2     0.160959  0.060908    0.714286     0.666667   0.941606      0.866667   \n3     0.133562  0.050502    0.714286     0.666667   0.313869      0.333333   \n4     0.215753  0.079334    0.714286     0.777778   0.934307      0.833333   \n\n   MasVnrArea  Foundation  BsmtFinSF1  BsmtUnfSF  ...  Fireplaces  \\\n0     0.12250         0.4    0.125089   0.073457  ...    0.000000   \n1     0.00000         0.2    0.173281   0.139079  ...    0.333333   \n2     0.10125         0.4    0.086109   0.212537  ...    0.333333   \n3     0.00000         0.0    0.038271   0.264447  ...    0.333333   \n4     0.21875         0.4    0.116052   0.239961  ...    0.333333   \n\n   GarageYrBlt  GarageCars  GarageArea  GarageQual  GarageCond  PavedDrive  \\\n0     0.996517        0.50    0.386460         1.0         1.0         1.0   \n1     0.983085        0.50    0.324401         1.0         1.0         1.0   \n2     0.995522        0.50    0.428773         1.0         1.0         1.0   \n3     0.994030        0.75    0.452750         1.0         1.0         1.0   \n4     0.995025        0.75    0.589563         1.0         1.0         1.0   \n\n   WoodDeckSF  OpenPorchSF  SaleCondition  \n0    0.000000     0.111517            0.8  \n1    0.404891     0.000000            0.8  \n2    0.000000     0.076782            0.8  \n3    0.000000     0.063985            0.0  \n4    0.260870     0.153565            0.8  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>HouseStyle</th>\n      <th>OverallQual</th>\n      <th>YearBuilt</th>\n      <th>YearRemodAdd</th>\n      <th>MasVnrArea</th>\n      <th>Foundation</th>\n      <th>BsmtFinSF1</th>\n      <th>BsmtUnfSF</th>\n      <th>...</th>\n      <th>Fireplaces</th>\n      <th>GarageYrBlt</th>\n      <th>GarageCars</th>\n      <th>GarageArea</th>\n      <th>GarageQual</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.150685</td>\n      <td>0.043768</td>\n      <td>0.714286</td>\n      <td>0.666667</td>\n      <td>0.956204</td>\n      <td>0.883333</td>\n      <td>0.12250</td>\n      <td>0.4</td>\n      <td>0.125089</td>\n      <td>0.073457</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.996517</td>\n      <td>0.50</td>\n      <td>0.386460</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.000000</td>\n      <td>0.111517</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.202055</td>\n      <td>0.050808</td>\n      <td>0.285714</td>\n      <td>0.555556</td>\n      <td>0.759124</td>\n      <td>0.433333</td>\n      <td>0.00000</td>\n      <td>0.2</td>\n      <td>0.173281</td>\n      <td>0.139079</td>\n      <td>...</td>\n      <td>0.333333</td>\n      <td>0.983085</td>\n      <td>0.50</td>\n      <td>0.324401</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.404891</td>\n      <td>0.000000</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.160959</td>\n      <td>0.060908</td>\n      <td>0.714286</td>\n      <td>0.666667</td>\n      <td>0.941606</td>\n      <td>0.866667</td>\n      <td>0.10125</td>\n      <td>0.4</td>\n      <td>0.086109</td>\n      <td>0.212537</td>\n      <td>...</td>\n      <td>0.333333</td>\n      <td>0.995522</td>\n      <td>0.50</td>\n      <td>0.428773</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.000000</td>\n      <td>0.076782</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.133562</td>\n      <td>0.050502</td>\n      <td>0.714286</td>\n      <td>0.666667</td>\n      <td>0.313869</td>\n      <td>0.333333</td>\n      <td>0.00000</td>\n      <td>0.0</td>\n      <td>0.038271</td>\n      <td>0.264447</td>\n      <td>...</td>\n      <td>0.333333</td>\n      <td>0.994030</td>\n      <td>0.75</td>\n      <td>0.452750</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.000000</td>\n      <td>0.063985</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.215753</td>\n      <td>0.079334</td>\n      <td>0.714286</td>\n      <td>0.777778</td>\n      <td>0.934307</td>\n      <td>0.833333</td>\n      <td>0.21875</td>\n      <td>0.4</td>\n      <td>0.116052</td>\n      <td>0.239961</td>\n      <td>...</td>\n      <td>0.333333</td>\n      <td>0.995025</td>\n      <td>0.75</td>\n      <td>0.589563</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>0.260870</td>\n      <td>0.153565</td>\n      <td>0.8</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Model selection \nwe need to perform model selection to see which model is the best for this use case. We will also use Root Mean Square Error(RMSE) to evaluate the models and chose the best performing model with it. The lower the RMSE, the better.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error\n\n# Splitting the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(scaled_X, y, test_size=0.2, random_state=600)\n\n# Lst of models to evaluate\nmodels = [\n    ('Decision Tree', DecisionTreeRegressor()),\n    ('Random Forest', RandomForestRegressor()),\n    ('Gradient Boosting', GradientBoostingRegressor()),\n    ('AdaBoost', AdaBoostRegressor()),\n    ('XGBoost', XGBRegressor())\n]\n\n# Comparing models\nfor name, model in models:\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    print(f'{name} RMSE: {rmse:.5f}')","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:41.342438Z","iopub.execute_input":"2023-11-13T16:53:41.342814Z","iopub.status.idle":"2023-11-13T16:53:44.309283Z","shell.execute_reply.started":"2023-11-13T16:53:41.342784Z","shell.execute_reply":"2023-11-13T16:53:44.308322Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"Decision Tree RMSE: 29427.35841\nRandom Forest RMSE: 22551.69673\nGradient Boosting RMSE: 21860.40426\nAdaBoost RMSE: 26082.36080\nXGBoost RMSE: 24599.42135\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Model Optimization \nLets optimize the models to see which one will produce the lowest RMSE.","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV\n\n# List of models and their corresponding parameter grids for tuning\nmodels = [\n    ('Decision Tree', DecisionTreeRegressor(), {'max_depth': [None, 5, 10]}),\n    ('Random Forest', RandomForestRegressor(), {'n_estimators': [100, 200, 300], 'max_depth': [None, 5, 10]}),\n    ('Gradient Boosting', GradientBoostingRegressor(), {'learning_rate': [0.1, 0.05, 0.01], 'n_estimators': [100, 200, 300]}),\n    ('AdaBoost', AdaBoostRegressor(), {'learning_rate': [0.1, 0.05, 0.01], 'n_estimators': [50, 100, 150]}),\n    ('XGBoost', XGBRegressor(), {'n_estimators': [100, 200, 300], 'learning_rate': [0.1, 0.05, 0.01], 'max_depth': [3, 5, 7]})\n]\n\n# Create a dataframe to store the predicted values of all models \nresults_df = pd.DataFrame({'Actual': y_test})\n\n# Hyperparameter tuning and evaluate models\nfor name, model, param_grid in models:\n    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, scoring='neg_mean_squared_error', cv=5)\n    grid_search.fit(X_train, y_train)\n    best_params = grid_search.best_params_\n    model.set_params(**best_params)\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    results_df[name]=y_pred\n    rmse = np.sqrt(mean_squared_error(y_test, y_pred))\n    print(f'{name} RMSE: {rmse:.5f}, Best Parameters: {best_params}')\nprint('\\n')\nresults_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:53:44.311094Z","iopub.execute_input":"2023-11-13T16:53:44.311793Z","iopub.status.idle":"2023-11-13T16:56:58.912537Z","shell.execute_reply.started":"2023-11-13T16:53:44.311755Z","shell.execute_reply":"2023-11-13T16:56:58.911169Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Decision Tree RMSE: 32678.65009, Best Parameters: {'max_depth': 5}\nRandom Forest RMSE: 23453.37280, Best Parameters: {'max_depth': 10, 'n_estimators': 100}\nGradient Boosting RMSE: 21728.61794, Best Parameters: {'learning_rate': 0.05, 'n_estimators': 300}\nAdaBoost RMSE: 26915.47047, Best Parameters: {'learning_rate': 0.1, 'n_estimators': 150}\nXGBoost RMSE: 21869.59277, Best Parameters: {'learning_rate': 0.05, 'max_depth': 3, 'n_estimators': 300}\n\n\n","output_type":"stream"},{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"      Actual  Decision Tree  Random Forest  Gradient Boosting       AdaBoost  \\\n373   123000  127550.673913  132245.510898      121065.052729  119825.112994   \n1076  170000  169491.964286  150231.853424      148285.572751  145459.476667   \n295   142500  127550.673913  146404.468114      140391.442538  149420.078740   \n1167  173000  169491.964286  193584.065037      200131.416053  187089.084567   \n303   149900  127550.673913  127922.552621      121769.037646  127774.111437   \n\n            XGBoost  \n373   119474.781250  \n1076  148056.531250  \n295   143528.281250  \n1167  200187.203125  \n303   123986.226562  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Actual</th>\n      <th>Decision Tree</th>\n      <th>Random Forest</th>\n      <th>Gradient Boosting</th>\n      <th>AdaBoost</th>\n      <th>XGBoost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>373</th>\n      <td>123000</td>\n      <td>127550.673913</td>\n      <td>132245.510898</td>\n      <td>121065.052729</td>\n      <td>119825.112994</td>\n      <td>119474.781250</td>\n    </tr>\n    <tr>\n      <th>1076</th>\n      <td>170000</td>\n      <td>169491.964286</td>\n      <td>150231.853424</td>\n      <td>148285.572751</td>\n      <td>145459.476667</td>\n      <td>148056.531250</td>\n    </tr>\n    <tr>\n      <th>295</th>\n      <td>142500</td>\n      <td>127550.673913</td>\n      <td>146404.468114</td>\n      <td>140391.442538</td>\n      <td>149420.078740</td>\n      <td>143528.281250</td>\n    </tr>\n    <tr>\n      <th>1167</th>\n      <td>173000</td>\n      <td>169491.964286</td>\n      <td>193584.065037</td>\n      <td>200131.416053</td>\n      <td>187089.084567</td>\n      <td>200187.203125</td>\n    </tr>\n    <tr>\n      <th>303</th>\n      <td>149900</td>\n      <td>127550.673913</td>\n      <td>127922.552621</td>\n      <td>121769.037646</td>\n      <td>127774.111437</td>\n      <td>123986.226562</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"results_df.reset_index(inplace=True)\nresults_df.drop(columns='index', axis=1, inplace=True)\nresults_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:56:58.914556Z","iopub.execute_input":"2023-11-13T16:56:58.915546Z","iopub.status.idle":"2023-11-13T16:56:58.933997Z","shell.execute_reply.started":"2023-11-13T16:56:58.915498Z","shell.execute_reply":"2023-11-13T16:56:58.932687Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"   Actual  Decision Tree  Random Forest  Gradient Boosting       AdaBoost  \\\n0  123000  127550.673913  132245.510898      121065.052729  119825.112994   \n1  170000  169491.964286  150231.853424      148285.572751  145459.476667   \n2  142500  127550.673913  146404.468114      140391.442538  149420.078740   \n3  173000  169491.964286  193584.065037      200131.416053  187089.084567   \n4  149900  127550.673913  127922.552621      121769.037646  127774.111437   \n\n         XGBoost  \n0  119474.781250  \n1  148056.531250  \n2  143528.281250  \n3  200187.203125  \n4  123986.226562  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Actual</th>\n      <th>Decision Tree</th>\n      <th>Random Forest</th>\n      <th>Gradient Boosting</th>\n      <th>AdaBoost</th>\n      <th>XGBoost</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>123000</td>\n      <td>127550.673913</td>\n      <td>132245.510898</td>\n      <td>121065.052729</td>\n      <td>119825.112994</td>\n      <td>119474.781250</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>170000</td>\n      <td>169491.964286</td>\n      <td>150231.853424</td>\n      <td>148285.572751</td>\n      <td>145459.476667</td>\n      <td>148056.531250</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>142500</td>\n      <td>127550.673913</td>\n      <td>146404.468114</td>\n      <td>140391.442538</td>\n      <td>149420.078740</td>\n      <td>143528.281250</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>173000</td>\n      <td>169491.964286</td>\n      <td>193584.065037</td>\n      <td>200131.416053</td>\n      <td>187089.084567</td>\n      <td>200187.203125</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>149900</td>\n      <td>127550.673913</td>\n      <td>127922.552621</td>\n      <td>121769.037646</td>\n      <td>127774.111437</td>\n      <td>123986.226562</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Validation \nModel validation is the process of assessing the performance and generalization ability of a machine learning model. It involves evaluating the model's performance on an independent dataset, separate from the training data, to estimate how well it will perform on unseen data. The goal of model validation is to ensure that the model can make accurate predictions on new, unseen instances and to identify any potential issues such as overfitting or underfitting. We don't have another dataset here, so we'll just use the training dataset again to check ","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import KFold\ndef kfold_cross_validation(scaled_X, y, k):\n    models = {\n        'XGBoost Regressor': XGBRegressor(),\n        'AdaBoost Regressor': AdaBoostRegressor(),\n        'Decision Tree Regressor': DecisionTreeRegressor(),\n        'Gradient Boosting Regressor': GradientBoostingRegressor(),\n        'Random Forest Regressor': RandomForestRegressor()\n    }\n    for model_name, model in models.items():\n        kf = KFold(n_splits=k, shuffle=True, random_state=600)\n        if isinstance(model, (RandomForestRegressor, AdaBoostRegressor, GradientBoostingRegressor, XGBRegressor, DecisionTreeRegressor)):\n            rmse_scores = []\n            for train_index, val_index in kf.split(scaled_X):\n                \n                # Splitting the data into train and validation sets\n                X_train, X_val, y_train, y_val = train_test_split(scaled_X, y, test_size=0.2, random_state=600)\n                model.fit(X_train, y_train)\n                y_pred = model.predict(X_val)\n                rmse_score = np.sqrt(mean_squared_error(y_val, y_pred))\n                rmse_scores.append(rmse_score)\n            avg_rmse_score = np.mean(rmse_scores)\n            print(f\"{model_name} - Average RMSE score across {k} folds: {avg_rmse_score:.5f}\")\n            ","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:56:58.935361Z","iopub.execute_input":"2023-11-13T16:56:58.935733Z","iopub.status.idle":"2023-11-13T16:56:58.949131Z","shell.execute_reply.started":"2023-11-13T16:56:58.935705Z","shell.execute_reply":"2023-11-13T16:56:58.948068Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"kfold_cross_validation(scaled_X, y, 5)","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:56:58.951090Z","iopub.execute_input":"2023-11-13T16:56:58.952857Z","iopub.status.idle":"2023-11-13T16:57:10.407356Z","shell.execute_reply.started":"2023-11-13T16:56:58.952809Z","shell.execute_reply":"2023-11-13T16:57:10.405961Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"XGBoost Regressor - Average RMSE score across 5 folds: 24599.42135\nAdaBoost Regressor - Average RMSE score across 5 folds: 26531.07124\nDecision Tree Regressor - Average RMSE score across 5 folds: 30883.98304\nGradient Boosting Regressor - Average RMSE score across 5 folds: 21851.32164\nRandom Forest Regressor - Average RMSE score across 5 folds: 23050.94053\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Best model: Gradient boosting regressor \nFrom the optimization and validation test, we can see that gradient boost regressor has the best performance. It has the lowest RMSE. So we'll use it on out test set.\n\n# Best model\nLet's create the best model using gradient boost regressor and it's suggested hyperparameters given above. The model will be made using a function that takes 3 parameters(X, y and test) as inputs and gives an output of the predicted values as a dataframe. Let's do that.","metadata":{}},{"cell_type":"code","source":"predictions_df = None\ndef best_model(X, y, test):\n    global predictions_df\n    \n    # Gradient Boosting Regressor with the best parameters\n    model = GradientBoostingRegressor(learning_rate=0.05, n_estimators=300)\n    \n    # Training the model on the training dataset\n    model.fit(X, y)\n    \n    # Make predictions on the test dataset\n    predictions = model.predict(test)\n    \n    # DataFrame to store the predictions \n    predictions_df = pd.DataFrame(predictions, columns=['Predicted Price']) \n    \n    return predictions_df","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.409048Z","iopub.execute_input":"2023-11-13T16:57:10.409447Z","iopub.status.idle":"2023-11-13T16:57:10.416817Z","shell.execute_reply.started":"2023-11-13T16:57:10.409414Z","shell.execute_reply":"2023-11-13T16:57:10.415531Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":"# Importing test dataset","metadata":{}},{"cell_type":"code","source":"test_df = pd.read_csv(\"/kaggle/input/house-prices-advanced-regression-techniques/test.csv\")\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.425268Z","iopub.execute_input":"2023-11-13T16:57:10.425689Z","iopub.status.idle":"2023-11-13T16:57:10.487556Z","shell.execute_reply.started":"2023-11-13T16:57:10.425653Z","shell.execute_reply":"2023-11-13T16:57:10.486270Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n\n  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n\n  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n0       0      6    2010        WD         Normal  \n1   12500      6    2010        WD         Normal  \n2       0      3    2010        WD         Normal  \n3       0      6    2010        WD         Normal  \n4       0      1    2010        WD         Normal  \n\n[5 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>120</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Gar2</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>144</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 80 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Cleaning test dataset","metadata":{}},{"cell_type":"code","source":"neighborhood_avg = test_df.groupby('Neighborhood')['LotFrontage'].median()\n\n# Filling in the null values in LotFrontage column with the average LotFrontage of the respective neighborhoods\ntest_df['LotFrontage'] = test_df.apply(lambda row: neighborhood_avg[row['Neighborhood']] if pd.isnull(row['LotFrontage']) else row['LotFrontage'], axis=1)\n\n# Checking for null values in LotFrontage column\ntest_df['LotFrontage'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.489158Z","iopub.execute_input":"2023-11-13T16:57:10.489522Z","iopub.status.idle":"2023-11-13T16:57:10.535556Z","shell.execute_reply.started":"2023-11-13T16:57:10.489493Z","shell.execute_reply":"2023-11-13T16:57:10.534314Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"# Find the most frequent value in the Electrical column \nmost_frequent_value = test_df['Electrical'].mode()[0] \n\n# Filling in the null values in Electrical column with the most frequent value\ntest_df['Electrical'].fillna(most_frequent_value, inplace=True)\ntest_df['Electrical'].isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.537083Z","iopub.execute_input":"2023-11-13T16:57:10.537945Z","iopub.status.idle":"2023-11-13T16:57:10.547577Z","shell.execute_reply.started":"2023-11-13T16:57:10.537909Z","shell.execute_reply":"2023-11-13T16:57:10.546289Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"code","source":"# Defining the categorical columns and their default imputation values\ncategorical_columns = [ 'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtExposure', 'BsmtFinType2', 'BsmtFinType1', 'BsmtCond', 'BsmtQual', 'MasVnrType' ] \ncategorical_impute_value = 'N'\n\n# Impute categorical columns\ntest_df[categorical_columns] = test_df[categorical_columns].fillna(categorical_impute_value) \n\n# Defining the numerical columns and their default imputation values \nnumerical_columns = ['GarageYrBlt', 'MasVnrArea']\n\nnumerical_impute_value = 0 \n\n# Impute numerical columns \ntest_df[numerical_columns] = test_df[numerical_columns].fillna(numerical_impute_value) \ntest_df.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.548925Z","iopub.execute_input":"2023-11-13T16:57:10.549385Z","iopub.status.idle":"2023-11-13T16:57:10.583379Z","shell.execute_reply.started":"2023-11-13T16:57:10.549339Z","shell.execute_reply":"2023-11-13T16:57:10.582290Z"},"trusted":true},"execution_count":31,"outputs":[{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"Id               0\nMSSubClass       0\nMSZoning         4\nLotFrontage      0\nLotArea          0\n                ..\nMiscVal          0\nMoSold           0\nYrSold           0\nSaleType         1\nSaleCondition    0\nLength: 80, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"test_df = test_df.set_index(test_df.iloc[:, 0])\ntest_df = test_df.iloc[:, 1:]\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.584633Z","iopub.execute_input":"2023-11-13T16:57:10.584959Z","iopub.status.idle":"2023-11-13T16:57:10.616951Z","shell.execute_reply.started":"2023-11-13T16:57:10.584932Z","shell.execute_reply":"2023-11-13T16:57:10.615697Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"      MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\nId                                                                      \n1461          20       RH         80.0    11622   Pave     N      Reg   \n1462          20       RL         81.0    14267   Pave     N      IR1   \n1463          60       RL         74.0    13830   Pave     N      IR1   \n1464          60       RL         78.0     9978   Pave     N      IR1   \n1465         120       RL         43.0     5005   Pave     N      IR1   \n\n     LandContour Utilities LotConfig  ... ScreenPorch PoolArea PoolQC  Fence  \\\nId                                    ...                                      \n1461         Lvl    AllPub    Inside  ...         120        0      N  MnPrv   \n1462         Lvl    AllPub    Corner  ...           0        0      N      N   \n1463         Lvl    AllPub    Inside  ...           0        0      N  MnPrv   \n1464         Lvl    AllPub    Inside  ...           0        0      N      N   \n1465         HLS    AllPub    Inside  ...         144        0      N      N   \n\n     MiscFeature MiscVal  MoSold  YrSold  SaleType  SaleCondition  \nId                                                                 \n1461           N       0       6    2010        WD         Normal  \n1462        Gar2   12500       6    2010        WD         Normal  \n1463           N       0       3    2010        WD         Normal  \n1464           N       0       6    2010        WD         Normal  \n1465           N       0       1    2010        WD         Normal  \n\n[5 rows x 79 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1461</th>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>N</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>120</td>\n      <td>0</td>\n      <td>N</td>\n      <td>MnPrv</td>\n      <td>N</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1462</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>N</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Corner</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>N</td>\n      <td>N</td>\n      <td>Gar2</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1463</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>N</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>N</td>\n      <td>MnPrv</td>\n      <td>N</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1464</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>N</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>N</td>\n      <td>N</td>\n      <td>N</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1465</th>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>N</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>144</td>\n      <td>0</td>\n      <td>N</td>\n      <td>N</td>\n      <td>N</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 79 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Looking for common columns between train and test dataset\ncommon_columns = list(set(scaled_X.columns).intersection(test_df.columns))\ncommon_columns","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.618856Z","iopub.execute_input":"2023-11-13T16:57:10.619363Z","iopub.status.idle":"2023-11-13T16:57:10.628378Z","shell.execute_reply.started":"2023-11-13T16:57:10.619319Z","shell.execute_reply":"2023-11-13T16:57:10.626952Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"['YearBuilt',\n '2ndFlrSF',\n 'GarageArea',\n 'HouseStyle',\n 'GarageCars',\n 'SaleCondition',\n 'GrLivArea',\n 'GarageQual',\n 'FullBath',\n 'CentralAir',\n 'GarageYrBlt',\n 'MasVnrArea',\n 'TotalBsmtSF',\n 'PavedDrive',\n 'GarageCond',\n 'OverallQual',\n 'HalfBath',\n 'LotFrontage',\n '1stFlrSF',\n 'TotRmsAbvGrd',\n 'Electrical',\n 'BedroomAbvGr',\n 'WoodDeckSF',\n 'BsmtUnfSF',\n 'LotArea',\n 'BsmtFinSF1',\n 'BsmtFullBath',\n 'Fireplaces',\n 'OpenPorchSF',\n 'YearRemodAdd',\n 'Foundation']"},"metadata":{}}]},{"cell_type":"code","source":"# Reducing test_df to the exact 30 columns contained in df\ntest_df = test_df[common_columns]\ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.630084Z","iopub.execute_input":"2023-11-13T16:57:10.630461Z","iopub.status.idle":"2023-11-13T16:57:10.662940Z","shell.execute_reply.started":"2023-11-13T16:57:10.630427Z","shell.execute_reply":"2023-11-13T16:57:10.661630Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"      YearBuilt  2ndFlrSF  GarageArea HouseStyle  GarageCars SaleCondition  \\\nId                                                                           \n1461       1961         0       730.0     1Story         1.0        Normal   \n1462       1958         0       312.0     1Story         1.0        Normal   \n1463       1997       701       482.0     2Story         2.0        Normal   \n1464       1998       678       470.0     2Story         2.0        Normal   \n1465       1992         0       506.0     1Story         2.0        Normal   \n\n      GrLivArea GarageQual  FullBath CentralAir  ...  BedroomAbvGr  \\\nId                                               ...                 \n1461        896         TA         1          Y  ...             2   \n1462       1329         TA         1          Y  ...             3   \n1463       1629         TA         2          Y  ...             3   \n1464       1604         TA         2          Y  ...             3   \n1465       1280         TA         2          Y  ...             2   \n\n      WoodDeckSF  BsmtUnfSF LotArea BsmtFinSF1  BsmtFullBath  Fireplaces  \\\nId                                                                         \n1461         140      270.0   11622      468.0           0.0           0   \n1462         393      406.0   14267      923.0           0.0           0   \n1463         212      137.0   13830      791.0           0.0           1   \n1464         360      324.0    9978      602.0           0.0           1   \n1465           0     1017.0    5005      263.0           0.0           0   \n\n      OpenPorchSF  YearRemodAdd  Foundation  \nId                                           \n1461            0          1961      CBlock  \n1462           36          1958      CBlock  \n1463           34          1998       PConc  \n1464           36          1998       PConc  \n1465           82          1992       PConc  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>YearBuilt</th>\n      <th>2ndFlrSF</th>\n      <th>GarageArea</th>\n      <th>HouseStyle</th>\n      <th>GarageCars</th>\n      <th>SaleCondition</th>\n      <th>GrLivArea</th>\n      <th>GarageQual</th>\n      <th>FullBath</th>\n      <th>CentralAir</th>\n      <th>...</th>\n      <th>BedroomAbvGr</th>\n      <th>WoodDeckSF</th>\n      <th>BsmtUnfSF</th>\n      <th>LotArea</th>\n      <th>BsmtFinSF1</th>\n      <th>BsmtFullBath</th>\n      <th>Fireplaces</th>\n      <th>OpenPorchSF</th>\n      <th>YearRemodAdd</th>\n      <th>Foundation</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1461</th>\n      <td>1961</td>\n      <td>0</td>\n      <td>730.0</td>\n      <td>1Story</td>\n      <td>1.0</td>\n      <td>Normal</td>\n      <td>896</td>\n      <td>TA</td>\n      <td>1</td>\n      <td>Y</td>\n      <td>...</td>\n      <td>2</td>\n      <td>140</td>\n      <td>270.0</td>\n      <td>11622</td>\n      <td>468.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1961</td>\n      <td>CBlock</td>\n    </tr>\n    <tr>\n      <th>1462</th>\n      <td>1958</td>\n      <td>0</td>\n      <td>312.0</td>\n      <td>1Story</td>\n      <td>1.0</td>\n      <td>Normal</td>\n      <td>1329</td>\n      <td>TA</td>\n      <td>1</td>\n      <td>Y</td>\n      <td>...</td>\n      <td>3</td>\n      <td>393</td>\n      <td>406.0</td>\n      <td>14267</td>\n      <td>923.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>36</td>\n      <td>1958</td>\n      <td>CBlock</td>\n    </tr>\n    <tr>\n      <th>1463</th>\n      <td>1997</td>\n      <td>701</td>\n      <td>482.0</td>\n      <td>2Story</td>\n      <td>2.0</td>\n      <td>Normal</td>\n      <td>1629</td>\n      <td>TA</td>\n      <td>2</td>\n      <td>Y</td>\n      <td>...</td>\n      <td>3</td>\n      <td>212</td>\n      <td>137.0</td>\n      <td>13830</td>\n      <td>791.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>34</td>\n      <td>1998</td>\n      <td>PConc</td>\n    </tr>\n    <tr>\n      <th>1464</th>\n      <td>1998</td>\n      <td>678</td>\n      <td>470.0</td>\n      <td>2Story</td>\n      <td>2.0</td>\n      <td>Normal</td>\n      <td>1604</td>\n      <td>TA</td>\n      <td>2</td>\n      <td>Y</td>\n      <td>...</td>\n      <td>3</td>\n      <td>360</td>\n      <td>324.0</td>\n      <td>9978</td>\n      <td>602.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>36</td>\n      <td>1998</td>\n      <td>PConc</td>\n    </tr>\n    <tr>\n      <th>1465</th>\n      <td>1992</td>\n      <td>0</td>\n      <td>506.0</td>\n      <td>1Story</td>\n      <td>2.0</td>\n      <td>Normal</td>\n      <td>1280</td>\n      <td>TA</td>\n      <td>2</td>\n      <td>Y</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1017.0</td>\n      <td>5005</td>\n      <td>263.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>82</td>\n      <td>1992</td>\n      <td>PConc</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"null_rows = test_df[test_df.isnull().any(axis=1)]\nnull_counts = null_rows.isnull().sum(axis=1)\nprint(null_rows)\nprint(null_counts)","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.664839Z","iopub.execute_input":"2023-11-13T16:57:10.665165Z","iopub.status.idle":"2023-11-13T16:57:10.686865Z","shell.execute_reply.started":"2023-11-13T16:57:10.665136Z","shell.execute_reply":"2023-11-13T16:57:10.685637Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stdout","text":"      YearBuilt  2ndFlrSF  GarageArea HouseStyle  GarageCars SaleCondition  \\\nId                                                                           \n2121       1946         0       280.0     1Story         1.0       Abnorml   \n2189       1959         0       624.0     1Story         2.0        Normal   \n2577       1923       886         NaN     2Story         NaN        Alloca   \n\n      GrLivArea GarageQual  FullBath CentralAir  ...  BedroomAbvGr  \\\nId                                               ...                 \n2121        896         TA         1          Y  ...             2   \n2189       3820         TA         3          Y  ...             5   \n2577       1828          N         2          Y  ...             3   \n\n      WoodDeckSF  BsmtUnfSF LotArea BsmtFinSF1  BsmtFullBath  Fireplaces  \\\nId                                                                         \n2121           0        NaN    5940        NaN           NaN           0   \n2189           0        0.0   47007        0.0           NaN           2   \n2577         174      311.0    9060      548.0           0.0           0   \n\n      OpenPorchSF  YearRemodAdd  Foundation  \nId                                           \n2121            0          1950       PConc  \n2189          372          1996        Slab  \n2577            0          1999      BrkTil  \n\n[3 rows x 31 columns]\nId\n2121    4\n2189    1\n2577    2\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Numerical columns\nnumerical_columns = test_df.select_dtypes(include=np.number).columns\n\n# Replacing null values with column medians\ntest_df[numerical_columns] = test_df[numerical_columns].fillna(test_df[numerical_columns].median())\n\nnull_rows = test_df[test_df.isnull().any(axis=1)]\nnull_counts = null_rows.isnull().sum(axis=1)\nprint(null_rows)\nprint(null_counts)\nprint(test_df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.688172Z","iopub.execute_input":"2023-11-13T16:57:10.688548Z","iopub.status.idle":"2023-11-13T16:57:10.731276Z","shell.execute_reply.started":"2023-11-13T16:57:10.688517Z","shell.execute_reply":"2023-11-13T16:57:10.729959Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Empty DataFrame\nColumns: [YearBuilt, 2ndFlrSF, GarageArea, HouseStyle, GarageCars, SaleCondition, GrLivArea, GarageQual, FullBath, CentralAir, GarageYrBlt, MasVnrArea, TotalBsmtSF, PavedDrive, GarageCond, OverallQual, HalfBath, LotFrontage, 1stFlrSF, TotRmsAbvGrd, Electrical, BedroomAbvGr, WoodDeckSF, BsmtUnfSF, LotArea, BsmtFinSF1, BsmtFullBath, Fireplaces, OpenPorchSF, YearRemodAdd, Foundation]\nIndex: []\n\n[0 rows x 31 columns]\nSeries([], dtype: float64)\nYearBuilt        0\n2ndFlrSF         0\nGarageArea       0\nHouseStyle       0\nGarageCars       0\nSaleCondition    0\nGrLivArea        0\nGarageQual       0\nFullBath         0\nCentralAir       0\nGarageYrBlt      0\nMasVnrArea       0\nTotalBsmtSF      0\nPavedDrive       0\nGarageCond       0\nOverallQual      0\nHalfBath         0\nLotFrontage      0\n1stFlrSF         0\nTotRmsAbvGrd     0\nElectrical       0\nBedroomAbvGr     0\nWoodDeckSF       0\nBsmtUnfSF        0\nLotArea          0\nBsmtFinSF1       0\nBsmtFullBath     0\nFireplaces       0\nOpenPorchSF      0\nYearRemodAdd     0\nFoundation       0\ndtype: int64\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Encoding test dataset","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\n# Iterating through the DataFrame columns\nfor column in test_df.columns:\n    \n    # Check if the column is categorical\n    if test_df[column].dtype == 'object':\n        \n        # Encode the categorical column using LabelEncoder\n        test_df[column] = encoder.fit_transform(test_df[column])\n        \ntest_df.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.734804Z","iopub.execute_input":"2023-11-13T16:57:10.735165Z","iopub.status.idle":"2023-11-13T16:57:10.775928Z","shell.execute_reply.started":"2023-11-13T16:57:10.735125Z","shell.execute_reply":"2023-11-13T16:57:10.774662Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"      YearBuilt  2ndFlrSF  GarageArea  HouseStyle  GarageCars  SaleCondition  \\\nId                                                                             \n1461       1961         0       730.0           2         1.0              4   \n1462       1958         0       312.0           2         1.0              4   \n1463       1997       701       482.0           4         2.0              4   \n1464       1998       678       470.0           4         2.0              4   \n1465       1992         0       506.0           2         2.0              4   \n\n      GrLivArea  GarageQual  FullBath  CentralAir  ...  BedroomAbvGr  \\\nId                                                 ...                 \n1461        896           4         1           1  ...             2   \n1462       1329           4         1           1  ...             3   \n1463       1629           4         2           1  ...             3   \n1464       1604           4         2           1  ...             3   \n1465       1280           4         2           1  ...             2   \n\n      WoodDeckSF  BsmtUnfSF  LotArea  BsmtFinSF1  BsmtFullBath  Fireplaces  \\\nId                                                                           \n1461         140      270.0    11622       468.0           0.0           0   \n1462         393      406.0    14267       923.0           0.0           0   \n1463         212      137.0    13830       791.0           0.0           1   \n1464         360      324.0     9978       602.0           0.0           1   \n1465           0     1017.0     5005       263.0           0.0           0   \n\n      OpenPorchSF  YearRemodAdd  Foundation  \nId                                           \n1461            0          1961           1  \n1462           36          1958           1  \n1463           34          1998           2  \n1464           36          1998           2  \n1465           82          1992           2  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>YearBuilt</th>\n      <th>2ndFlrSF</th>\n      <th>GarageArea</th>\n      <th>HouseStyle</th>\n      <th>GarageCars</th>\n      <th>SaleCondition</th>\n      <th>GrLivArea</th>\n      <th>GarageQual</th>\n      <th>FullBath</th>\n      <th>CentralAir</th>\n      <th>...</th>\n      <th>BedroomAbvGr</th>\n      <th>WoodDeckSF</th>\n      <th>BsmtUnfSF</th>\n      <th>LotArea</th>\n      <th>BsmtFinSF1</th>\n      <th>BsmtFullBath</th>\n      <th>Fireplaces</th>\n      <th>OpenPorchSF</th>\n      <th>YearRemodAdd</th>\n      <th>Foundation</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1461</th>\n      <td>1961</td>\n      <td>0</td>\n      <td>730.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>4</td>\n      <td>896</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>140</td>\n      <td>270.0</td>\n      <td>11622</td>\n      <td>468.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1961</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1462</th>\n      <td>1958</td>\n      <td>0</td>\n      <td>312.0</td>\n      <td>2</td>\n      <td>1.0</td>\n      <td>4</td>\n      <td>1329</td>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>3</td>\n      <td>393</td>\n      <td>406.0</td>\n      <td>14267</td>\n      <td>923.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>36</td>\n      <td>1958</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1463</th>\n      <td>1997</td>\n      <td>701</td>\n      <td>482.0</td>\n      <td>4</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>1629</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>3</td>\n      <td>212</td>\n      <td>137.0</td>\n      <td>13830</td>\n      <td>791.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>34</td>\n      <td>1998</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1464</th>\n      <td>1998</td>\n      <td>678</td>\n      <td>470.0</td>\n      <td>4</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>1604</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>3</td>\n      <td>360</td>\n      <td>324.0</td>\n      <td>9978</td>\n      <td>602.0</td>\n      <td>0.0</td>\n      <td>1</td>\n      <td>36</td>\n      <td>1998</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1465</th>\n      <td>1992</td>\n      <td>0</td>\n      <td>506.0</td>\n      <td>2</td>\n      <td>2.0</td>\n      <td>4</td>\n      <td>1280</td>\n      <td>4</td>\n      <td>2</td>\n      <td>1</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1017.0</td>\n      <td>5005</td>\n      <td>263.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>82</td>\n      <td>1992</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Scaling","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\ntest_df1 = scaler.fit_transform(test_df)\ntest_df1 = pd.DataFrame(test_df1, columns = scaled_X.columns)\ntest_df1.head()","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.777522Z","iopub.execute_input":"2023-11-13T16:57:10.778120Z","iopub.status.idle":"2023-11-13T16:57:10.821204Z","shell.execute_reply.started":"2023-11-13T16:57:10.778083Z","shell.execute_reply":"2023-11-13T16:57:10.820290Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"   LotFrontage   LotArea  HouseStyle  OverallQual  YearBuilt  YearRemodAdd  \\\n0     0.625954  0.000000    0.490591     0.333333        0.2           0.8   \n1     0.603053  0.000000    0.209677     0.333333        0.2           0.8   \n2     0.900763  0.376477    0.323925     0.666667        0.4           0.8   \n3     0.908397  0.364125    0.315860     0.666667        0.4           0.8   \n4     0.862595  0.000000    0.340054     0.333333        0.4           0.8   \n\n   MasVnrArea  Foundation  BsmtFinSF1  BsmtUnfSF  ...  Fireplaces  \\\n0    0.104309         1.0        0.25        1.0  ...    0.333333   \n1    0.196672         1.0        0.25        1.0  ...    0.500000   \n2    0.260666         1.0        0.50        1.0  ...    0.500000   \n3    0.255333         1.0        0.50        1.0  ...    0.500000   \n4    0.186220         1.0        0.50        1.0  ...    0.333333   \n\n   GarageYrBlt  GarageCars  GarageArea  GarageQual  GarageCond  PavedDrive  \\\n0     0.098315    0.126168    0.184147    0.116708         0.0        0.00   \n1     0.275983    0.189720    0.232124    0.230175         0.0        0.00   \n2     0.148876    0.064019    0.224197    0.197257         0.0        0.25   \n3     0.252809    0.151402    0.154326    0.150125         0.0        0.25   \n4     0.000000    0.475234    0.064121    0.065586         0.0        0.00   \n\n   WoodDeckSF  OpenPorchSF  SaleCondition  \n0    0.000000     0.183333            0.2  \n1    0.048518     0.133333            0.2  \n2    0.045822     0.800000            0.4  \n3    0.048518     0.800000            0.4  \n4    0.110512     0.700000            0.4  \n\n[5 rows x 31 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>HouseStyle</th>\n      <th>OverallQual</th>\n      <th>YearBuilt</th>\n      <th>YearRemodAdd</th>\n      <th>MasVnrArea</th>\n      <th>Foundation</th>\n      <th>BsmtFinSF1</th>\n      <th>BsmtUnfSF</th>\n      <th>...</th>\n      <th>Fireplaces</th>\n      <th>GarageYrBlt</th>\n      <th>GarageCars</th>\n      <th>GarageArea</th>\n      <th>GarageQual</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.625954</td>\n      <td>0.000000</td>\n      <td>0.490591</td>\n      <td>0.333333</td>\n      <td>0.2</td>\n      <td>0.8</td>\n      <td>0.104309</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.333333</td>\n      <td>0.098315</td>\n      <td>0.126168</td>\n      <td>0.184147</td>\n      <td>0.116708</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>0.183333</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.603053</td>\n      <td>0.000000</td>\n      <td>0.209677</td>\n      <td>0.333333</td>\n      <td>0.2</td>\n      <td>0.8</td>\n      <td>0.196672</td>\n      <td>1.0</td>\n      <td>0.25</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.500000</td>\n      <td>0.275983</td>\n      <td>0.189720</td>\n      <td>0.232124</td>\n      <td>0.230175</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>0.048518</td>\n      <td>0.133333</td>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.900763</td>\n      <td>0.376477</td>\n      <td>0.323925</td>\n      <td>0.666667</td>\n      <td>0.4</td>\n      <td>0.8</td>\n      <td>0.260666</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.500000</td>\n      <td>0.148876</td>\n      <td>0.064019</td>\n      <td>0.224197</td>\n      <td>0.197257</td>\n      <td>0.0</td>\n      <td>0.25</td>\n      <td>0.045822</td>\n      <td>0.800000</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.908397</td>\n      <td>0.364125</td>\n      <td>0.315860</td>\n      <td>0.666667</td>\n      <td>0.4</td>\n      <td>0.8</td>\n      <td>0.255333</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.500000</td>\n      <td>0.252809</td>\n      <td>0.151402</td>\n      <td>0.154326</td>\n      <td>0.150125</td>\n      <td>0.0</td>\n      <td>0.25</td>\n      <td>0.048518</td>\n      <td>0.800000</td>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.862595</td>\n      <td>0.000000</td>\n      <td>0.340054</td>\n      <td>0.333333</td>\n      <td>0.4</td>\n      <td>0.8</td>\n      <td>0.186220</td>\n      <td>1.0</td>\n      <td>0.50</td>\n      <td>1.0</td>\n      <td>...</td>\n      <td>0.333333</td>\n      <td>0.000000</td>\n      <td>0.475234</td>\n      <td>0.064121</td>\n      <td>0.065586</td>\n      <td>0.0</td>\n      <td>0.00</td>\n      <td>0.110512</td>\n      <td>0.700000</td>\n      <td>0.4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 31 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Predictions","metadata":{}},{"cell_type":"code","source":"# Calling best_model function for predictions on the test dataset\nbest_model(scaled_X, y, test_df1)","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:10.822758Z","iopub.execute_input":"2023-11-13T16:57:10.823100Z","iopub.status.idle":"2023-11-13T16:57:12.600038Z","shell.execute_reply.started":"2023-11-13T16:57:10.823069Z","shell.execute_reply":"2023-11-13T16:57:12.598718Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"      Predicted Price\n0       128671.098560\n1       115609.316244\n2       214202.395336\n3       207731.503665\n4       146228.359970\n...               ...\n1454    201877.506473\n1455    229376.713541\n1456    137389.520004\n1457    142060.565577\n1458    208784.829380\n\n[1459 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Predicted Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>128671.098560</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>115609.316244</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>214202.395336</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>207731.503665</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>146228.359970</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1454</th>\n      <td>201877.506473</td>\n    </tr>\n    <tr>\n      <th>1455</th>\n      <td>229376.713541</td>\n    </tr>\n    <tr>\n      <th>1456</th>\n      <td>137389.520004</td>\n    </tr>\n    <tr>\n      <th>1457</th>\n      <td>142060.565577</td>\n    </tr>\n    <tr>\n      <th>1458</th>\n      <td>208784.829380</td>\n    </tr>\n  </tbody>\n</table>\n<p>1459 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# changing index of predictions to match that of test dataset\npredictions_df=predictions_df.set_index(test_df.index)\npredictions_df.to_csv('predictions.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:12.601678Z","iopub.execute_input":"2023-11-13T16:57:12.602354Z","iopub.status.idle":"2023-11-13T16:57:12.617726Z","shell.execute_reply.started":"2023-11-13T16:57:12.602315Z","shell.execute_reply":"2023-11-13T16:57:12.616618Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"predictions_df","metadata":{"execution":{"iopub.status.busy":"2023-11-13T16:57:12.619186Z","iopub.execute_input":"2023-11-13T16:57:12.619579Z","iopub.status.idle":"2023-11-13T16:57:12.633012Z","shell.execute_reply.started":"2023-11-13T16:57:12.619545Z","shell.execute_reply":"2023-11-13T16:57:12.631822Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"      Predicted Price\nId                   \n1461    128671.098560\n1462    115609.316244\n1463    214202.395336\n1464    207731.503665\n1465    146228.359970\n...               ...\n2915    201877.506473\n2916    229376.713541\n2917    137389.520004\n2918    142060.565577\n2919    208784.829380\n\n[1459 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Predicted Price</th>\n    </tr>\n    <tr>\n      <th>Id</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1461</th>\n      <td>128671.098560</td>\n    </tr>\n    <tr>\n      <th>1462</th>\n      <td>115609.316244</td>\n    </tr>\n    <tr>\n      <th>1463</th>\n      <td>214202.395336</td>\n    </tr>\n    <tr>\n      <th>1464</th>\n      <td>207731.503665</td>\n    </tr>\n    <tr>\n      <th>1465</th>\n      <td>146228.359970</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2915</th>\n      <td>201877.506473</td>\n    </tr>\n    <tr>\n      <th>2916</th>\n      <td>229376.713541</td>\n    </tr>\n    <tr>\n      <th>2917</th>\n      <td>137389.520004</td>\n    </tr>\n    <tr>\n      <th>2918</th>\n      <td>142060.565577</td>\n    </tr>\n    <tr>\n      <th>2919</th>\n      <td>208784.829380</td>\n    </tr>\n  </tbody>\n</table>\n<p>1459 rows × 1 columns</p>\n</div>"},"metadata":{}}]}]}